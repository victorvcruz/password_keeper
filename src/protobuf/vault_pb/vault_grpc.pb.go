// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: vault.proto

package vault_pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vault_Find_FullMethodName    = "/Vault/Find"
	Vault_FindAll_FullMethodName = "/Vault/FindAll"
	Vault_Create_FullMethodName  = "/Vault/Create"
	Vault_Update_FullMethodName  = "/Vault/Update"
	Vault_Delete_FullMethodName  = "/Vault/Delete"
)

// VaultClient is the client API for Vault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultClient interface {
	Find(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VaultResponse, error)
	FindAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllVaultResponse, error)
	Create(ctx context.Context, in *VaultRequest, opts ...grpc.CallOption) (*VaultResponse, error)
	Update(ctx context.Context, in *VaultRequest, opts ...grpc.CallOption) (*VaultResponse, error)
	Delete(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VaultResponse, error)
}

type vaultClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultClient(cc grpc.ClientConnInterface) VaultClient {
	return &vaultClient{cc}
}

func (c *vaultClient) Find(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VaultResponse, error) {
	out := new(VaultResponse)
	err := c.cc.Invoke(ctx, Vault_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) FindAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllVaultResponse, error) {
	out := new(AllVaultResponse)
	err := c.cc.Invoke(ctx, Vault_FindAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Create(ctx context.Context, in *VaultRequest, opts ...grpc.CallOption) (*VaultResponse, error) {
	out := new(VaultResponse)
	err := c.cc.Invoke(ctx, Vault_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Update(ctx context.Context, in *VaultRequest, opts ...grpc.CallOption) (*VaultResponse, error) {
	out := new(VaultResponse)
	err := c.cc.Invoke(ctx, Vault_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultClient) Delete(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VaultResponse, error) {
	out := new(VaultResponse)
	err := c.cc.Invoke(ctx, Vault_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServer is the server API for Vault service.
// All implementations must embed UnimplementedVaultServer
// for forward compatibility
type VaultServer interface {
	Find(context.Context, *empty.Empty) (*VaultResponse, error)
	FindAll(context.Context, *empty.Empty) (*AllVaultResponse, error)
	Create(context.Context, *VaultRequest) (*VaultResponse, error)
	Update(context.Context, *VaultRequest) (*VaultResponse, error)
	Delete(context.Context, *empty.Empty) (*VaultResponse, error)
	mustEmbedUnimplementedVaultServer()
}

// UnimplementedVaultServer must be embedded to have forward compatible implementations.
type UnimplementedVaultServer struct {
}

func (UnimplementedVaultServer) Find(context.Context, *empty.Empty) (*VaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedVaultServer) FindAll(context.Context, *empty.Empty) (*AllVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedVaultServer) Create(context.Context, *VaultRequest) (*VaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVaultServer) Update(context.Context, *VaultRequest) (*VaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVaultServer) Delete(context.Context, *empty.Empty) (*VaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVaultServer) mustEmbedUnimplementedVaultServer() {}

// UnsafeVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServer will
// result in compilation errors.
type UnsafeVaultServer interface {
	mustEmbedUnimplementedVaultServer()
}

func RegisterVaultServer(s grpc.ServiceRegistrar, srv VaultServer) {
	s.RegisterService(&Vault_ServiceDesc, srv)
}

func _Vault_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Find(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_FindAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).FindAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Create(ctx, req.(*VaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Update(ctx, req.(*VaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vault_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vault_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServer).Delete(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Vault_ServiceDesc is the grpc.ServiceDesc for Vault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Vault",
	HandlerType: (*VaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _Vault_Find_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _Vault_FindAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Vault_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Vault_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Vault_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vault.proto",
}
